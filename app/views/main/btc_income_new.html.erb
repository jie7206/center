<%
########## Function Area Begin ##########

# 主要处理流程
def main_process
  #1.获取需要的数据
  get_values
  #2.计算比特币总数
  cal_btc_sum
  #3.计算比特币总值
  cal_btc_value
  #4.计算比特币总投资预算
  cal_btc_total_budgets
  #5.计算比特币持仓总值
  cal_btc_hold_twd
  #6.计算比特币交易成本
  cal_cost
  #7.计算比特币获利与损益
  cal_btc_profits
  #8.计算平仓后的损益与可直接平仓的值
  cal_settle
  #9.根据值大小设定显示的style
  set_css_style
end

#1.获取需要的数据
def get_values
  # 目前各钱包拥有的比特币
  @my_btc_arr = value_of('my_btc').split(",")
  # 比特币最新价格
  @btc_price = value_of('btc_price').to_f
  # 1美元兑换多少人民币
  @usd2cny = value_of('exchange_rates_USD_to_MCY').to_f
  # 1人民币兑换多少新台币
  @cny2twd = value_of('exchange_rates_MCY').to_f
  # 1美元兑换多少新台币
  @usd2twd = value_of('exchange_rates_HUSD').to_f
  # 比特币实际总投资本金
  @btc_total_budget_real = value_of('btc_total_budget_real').to_i
  # 比特币总投资警示价
  @btc_total_budget_warning = value_of('btc_total_budget_warning').to_i
  # 达多少比特币则显示可收割
  @btc_harvest_unit = value_of("btc_harvest_unit").to_f
  # 比特币短线每月获利目标(CNY)
  @btc_month_goal = value_of("btc_month_goal").to_i
  # 比特币总投资损益警示
  @btc_profit_highest_warn = value_of('btc_profit_highest_warn').to_f
  @btc_profit_lowest_warn = value_of('btc_profit_lowest_warn').to_f
  # 载入与贷款相关的讯息
  load_loan_data
  # 获取用户表单输入的资料
  get_inputs
  # 设定表单计算模式
  set_cal_mode
  # 依据模式值显示相对应的CSS(让用户知道现在处在什么模式)
  set_cal_css
  # 依据计算模式更新相应的值
  case @cal_mode
    when "SET","BUY&SET"
      @btc_price = @try_set_price
    when "AVE"
    when "LEV"
    when "BUY"
  end
end

#2.计算比特币总数
def cal_btc_sum
  # 字符转成阵列
  @btcs = @my_btc_arr.map {|s| s.to_f}
  # 所有的比特币总数
  @btc_sum = @btcs.sum
  # 可供交易的比特币总数
  @btc_sum_ex = @btcs[2]+@btcs[3]+@btcs[4]
  # 计算储存在冷钱包里的比特币总值
  cal_trezor_twd
  # 依据计算模式更新相应的值
  case @cal_mode
    when "BUY","SET","BUY&SET","AVE","LEV"
      if @cal_mode == "AVE"
        cal_ex_cost_twd
        cal_price_and_units_by_ave
      end
      if @cal_mode == "LEV"
        cal_ex_cost_twd
        cal_price_by_level
      end
      # 如果超出预算则自动降低能购买的单位数
      check_try_buy_unit
      @btc_sum += @try_buy_unit
      @btc_sum_ex += @try_buy_unit
  end
end

#3.计算比特币总值
def cal_btc_value
  @btc_value_twd = (@btc_price*@btc_sum*@usd2twd).to_i
  # 比特币值多少人民币
  @btc_value_cny = (@btc_value_twd/@cny2twd).to_i
  # 比特币值多少美元
  @btc_value_usd = (@btc_value_twd/@usd2twd).to_i
  # 依据计算模式更新相应的值
  case @cal_mode
    when "SET"
      cal_trezor_twd
    when "AVE"
    when "LEV"
    when "BUY"
  end
end

#4.计算比特币总投资预算
def cal_btc_total_budgets
  #火币USDT资产总值
  get_total_usdt
  @btc_total_budget_twd = @total_usdt
  # 计算能拥有比特币的最大数量
  cal_max_btc_sum
  # 计算持币总值
  cal_btc_hold_twd
  @btc_total_budget_twd += @btc_hold_twd
  # 比特币总投资预算 - 比特币短线已实现获利(下个月给孟丽的生活费)
  @btc_total_budget_twd -= keep_short_profit
  # 依据计算模式更新相应的值
  case @cal_mode
    when "BUY","SET","BUY&SET","AVE","LEV"
      @btc_total_budget_twd -= @try_buy_unit*@try_buy_price*@usd2twd
      @total_usdt -= @try_buy_unit*@try_buy_price*@usd2twd
  end
  @btc_total_budget_twd = @btc_total_budget_twd.to_i
end

#5.计算比特币持仓总值
def cal_btc_hold_twd
  @btc_hold_twd = 0
  # 计算在交易所可供交易的持币总值
  [2,3,4].each do |index|
    @btc_hold_twd += @my_btc_arr[index].to_f*@btc_price*@usd2twd
  end
  # 计算持仓仓位值
  @btc_hold_twd_level = @btc_hold_twd.to_f/@btc_total_budget_twd*100
  # 依据计算模式更新相应的值
  case @cal_mode
    when "BUY","SET","BUY&SET","AVE","LEV"
      @btc_hold_twd += @try_buy_unit*@btc_price*@usd2twd
      @btc_hold_twd_level = @btc_hold_twd.to_f/@btc_total_budget_twd*100
  end
  @btc_hold_twd = @btc_hold_twd.to_i
end

#6.计算比特币交易成本
def cal_cost
  # 比特币交易总成本(台币)
  cal_ex_cost_twd
  # 显示总资产净值
  @total_asset_value = link_to_net_asset_value
  # 依据计算模式更新相应的值
  case @cal_mode
    when "BUY","SET","BUY&SET","AVE","LEV"
      @ex_cost_twd += (@try_buy_unit*@try_buy_price*@usd2twd).to_i
      @ex_cost_twd_level = @ex_cost_twd.to_f/@btc_total_budget_warning*100
      @unit_ave_price = @ex_cost_twd/@usd2twd/@btc_sum_ex
      cal_max_btc_sum
      cal_total_asset_value
  end
end

#7.计算比特币获利与损益
def cal_btc_profits
  if @btc_hold_twd > 0
    # 含冷钱包的总投资获利
    @investment_cost = @btc_total_budget_real-@total_usdt
    @btc_total_profit_twd = (@btc_sum*@btc_price*@usd2twd - @investment_cost - @total_loan_interests_value).to_i # 总值-投资成本-貸款總利息
    @btc_total_profit_rate = (@btc_total_profit_twd.to_f/@investment_cost)*100
    # 不含冷钱包的投资损益
    @btc_profit_twd = (@btc_sum_ex*@btc_price*@usd2twd - @ex_cost_twd).to_i
    @btc_profit_cny = (@btc_profit_twd/@cny2twd).to_i
    @btc_profit_usd = (@btc_profit_twd/@usd2twd).to_i
    @btc_profit_rate = (@btc_profit_twd.to_f/@ex_cost_twd)*100
  else
    @btc_total_profit_twd = 0
    @btc_total_profit_rate = 0
    @btc_profit_twd = @btc_profit_cny = @btc_profit_usd = 0
    @btc_profit_rate = 0
  end
  # 总获利值换成人民币
  @btc_total_profit_cny = (@btc_total_profit_twd/@cny2twd).to_i
  # 总获利值换成美元
  @btc_total_profit_usd = (@btc_total_profit_twd/@usd2twd).to_i
  # 依据计算模式更新相应的值
  case @cal_mode
    when "SET"
    when "AVE"
    when "LEV"
    when "BUY"
  end
end

#8.计算平仓后的损益与可直接平仓的值
def cal_settle
  @settle_profit = (@btc_hold_twd > 0 and @btc_profit_twd > 0) ? (@btc_total_budget_twd-@btc_total_budget_warning-@btc_month_goal*@cny2twd)/@usd2twd/@btc_price : 0
  @settle_profit = 0 if @settle_profit < 0
  #if params[:try_buy_price] and params[:try_buy_price].to_f > 0 and params[:try_buy_unit] and params[:try_buy_unit].to_f > 0 and params[:try_ave_price].empty? and params[:try_set_level].empty?
    # 原始公式(因为@try_buy_unit已在前面代码中被加入，因此只要更新total_usdt的值即可)
    # @settle_price*(@btc_sum_ex+@try_buy_unit-@btc_harvest_unit)*@twd_usd_rate+(total_usdt-@try_buy_price*@try_buy_unit*@twd_usd_rate)-@btc_total_budget_warning-@btc_month_goal*@twd_rate=0
  #   buysell = @try_buy_unit > 0 ? 1 : -1
  #   @settle_price = ((@btc_total_budget_warning+@btc_month_goal*@twd_rate-total_usdt+buysell*(@try_buy_price*@try_buy_unit*@twd_usd_rate))/((@btc_sum_ex-@btc_harvest_unit)*@twd_usd_rate)).to_i
  # else
    # 原始公式
    # @settle_price*(@btc_sum_ex-@btc_harvest_unit)*@twd_usd_rate+total_usdt-@btc_total_budget_warning-@btc_month_goal*@twd_rate=0
  @settle_price=((@btc_total_budget_warning+@btc_month_goal*@cny2twd-@total_usdt)/((@btc_sum_ex-@btc_harvest_unit)*@usd2twd)).to_i
  # end
  # 依据计算模式更新相应的值
  case @cal_mode
    when "SET"
    when "AVE"
    when "LEV"
    when "BUY"
  end
end

#9.根据值大小设定显示的style
def set_css_style
  if @btc_total_budget_twd < @btc_total_budget_warning
    @btc_total_budget_warn = "green_warn"
  else
    @btc_total_budget_warn = ""
  end
  if @btc_price < @unit_ave_price
    @ave_price_warn = "green_warn"
  else
    @ave_price_warn = ""
  end
  if @btc_profit_rate > @btc_profit_highest_warn
    @btc_profit_warn = "red_warn"
  elsif @btc_profit_rate < @btc_profit_lowest_warn
    @btc_profit_warn = "green_warn"
  else
    @btc_profit_warn = ""
  end
  if @btc_profit_twd/@cny2twd >= @btc_month_goal
    @cny_profit_warn = "red_warn"
  else
    @cny_profit_warn = ""
  end
  if @settle_profit > @btc_harvest_unit
    @harvest_unit_warn = "red_warn"
  else
    @harvest_unit_warn = ""
  end
end

# 获取用户表单输入的资料
def get_inputs
  @try_buy_price = params[:try_buy_price] ? params[:try_buy_price].to_f : 0.0
  @try_buy_unit = params[:try_buy_unit] ? params[:try_buy_unit].to_f : 0.0
  @try_set_price = params[:try_set_price] ? params[:try_set_price].to_f : 0.0
  @try_ave_price = params[:try_ave_price] ? params[:try_ave_price].to_f : 0.0
  @try_set_level = params[:try_set_level] ? params[:try_set_level].to_f : 0.0
end

# 设定表单计算模式
def set_cal_mode
  # 优先顺序：定价 > 均价 > 仓位
  if (@try_buy_unit != 0 or (@try_buy_price > 0 and @try_buy_unit != 0)) and @try_set_price > 0
    @cal_mode = "BUY&SET"
  elsif @try_set_price > 0
    @cal_mode = "SET"
  elsif @try_ave_price > 0
    @cal_mode = "AVE"
  elsif @try_set_level > 0
    @cal_mode = "LEV"
  elsif @try_buy_unit != 0 or (@try_buy_price > 0 and @try_buy_unit != 0)
    @cal_mode = "BUY"
  else
    @cal_mode = ""
  end
end

# 依据模式值显示相对应的CSS(让用户知道现在处在什么模式)
def set_cal_css
  @set_price_hint = @ave_price_hint = @set_level_hint = @buy_unit_hint = ""
  case @cal_mode
    when "SET"
      @set_price_hint = "blue_warn"
    when "AVE"
      @ave_price_hint = "blue_warn"
    when "LEV"
      @set_level_hint = "blue_warn"
    when "BUY"
      @buy_unit_hint = "blue_warn"
    when "BUY&SET"
      @buy_unit_hint = "blue_warn"
      @set_price_hint = "blue_warn"
  end
end

# 计算储存在冷钱包里的比特币总值
def cal_trezor_twd
  # 储存在冷钱包里的比特币总数
  @trezor_jie7206 = @btcs[0]+@btcs[1]
  # 储存在冷钱包里的比特币值多少台币
  @trezor_jie7206_twd = (@btc_price*@trezor_jie7206*@usd2twd).to_i
end

# 计算总资产净值
def cal_total_asset_value
  # 计算數字貨幣资产总值
  @digital_currency_sum = @btc_total_budget_twd+@trezor_jie7206_twd #总投资预算+冷钱包现值
  # 计算流動資產资产总值
  @flow_assets_sum = sum_money_of('flow_assets')
  # 计算預計支出
  @plan_use_sum = sum_money_of('plan_use')
  # 计算固定資產的资产总值
  @fixed_assets_sum = sum_money_of('fixed_assets')
  # 计算貸款項目的本金与利息
  @loan_value_sum = sum_money_of('loan_items')+@total_loan_interests_value
  # 加总计算净值
  @total_asset_value = (@digital_currency_sum+@flow_assets_sum-@plan_use_sum+@fixed_assets_sum-@loan_value_sum).to_i
end

# 火币USDT资产总值
def get_total_usdt
  @total_usdt = 0
  [5,119].each do |index|
    @total_usdt += AssetItem.find(index).to_ntd
  end
end

# 计算能拥有比特币的最大数量
def cal_max_btc_sum
  @max_btc_sum = @btc_sum + @total_usdt/(@btc_price*@usd2twd)
end

# 比特币短线已实现获利(下个月给孟丽的生活费)
def keep_short_profit
  AssetItem.find(55).to_ntd
end

# 载入与贷款相关的讯息
def load_loan_data
  # 下次领取年金时间
  @next_jinruyi_back_date = value_of('next_jinruyi_back_date').to_date
  # 金如意贷款总值
  @jinruyi = AssetItem.find(95)
  @loan_amount = @jinruyi.amount.to_i
  # 金如意最近贷款日期
  @loan_begin_date = @jinruyi.loan_begin_date.to_date
  # 到下次领取年金所需偿付利息的天数
  @loan_lixi_days = (@next_jinruyi_back_date-@loan_begin_date).to_i
  # 到下次领取年金所需偿付的利息
  @loan_lixi = (@loan_lixi_days * (@loan_amount*0.065/365)).to_i
  # 到下次领取年金时的贷款余额
  @loan_amount = @loan_amount + @loan_lixi - 300000
  # 今日貸款總利息
  @total_loan_interests_value = get_total_loan_interest_ntd_array.sum.to_i
end

# 比特币交易总成本(台币)
def cal_ex_cost_twd
  @ex_cost_twd = ((eval(value_of("btc_total_cost")))*@usd2twd).to_i
  # 成本仓位
  @ex_cost_twd_level = @ex_cost_twd.to_f/@btc_total_budget_warning*100
  # 比特币每单位均价
  @unit_ave_price = @ex_cost_twd/@usd2twd/@btc_sum_ex
end

# 如果超出预算则自动降低能购买的单位数
def check_try_buy_unit
  get_total_usdt
  max_buy_unit = @total_usdt/@usd2twd/@try_buy_price
  if @try_buy_unit > max_buy_unit
    @try_buy_unit = (format("%.4f",max_buy_unit)).to_f
    params[:try_buy_unit] = @try_buy_unit
  end
end

# 给定均价，回传买价和单位数
def cal_price_and_units_by_ave
  # 以均价为最优先
  if @try_ave_price > 0
    # 如果给定价格则计算购买单位
    if @try_buy_price > 0 and @try_buy_unit == 0
      @try_buy_unit = cal_ave_buy_unit
    # 如果给定单位则计算购买价格
    elsif @try_buy_unit != 0 and @try_buy_price == 0
      @try_buy_price = cal_ave_buy_price
    # 如果两个都给，则保留价格
    elsif @try_buy_unit != 0 and @try_buy_price > 0
      @try_buy_unit = cal_ave_buy_unit
    # 如果都没给定
    else
      @try_buy_price = @btc_price.to_i
      @try_buy_unit = cal_ave_buy_unit
    end
    params[:try_buy_price] = @try_buy_price
    params[:try_buy_unit] = @try_buy_unit
  end
end

# 给定均价和单位数，计算买价
def cal_ave_buy_price
  ((@try_ave_price*@usd2twd*(@btc_sum_ex+@try_buy_unit)-@ex_cost_twd)/@try_buy_unit/@usd2twd).to_i
end

# 给定均价和买价，计算单位数
def cal_ave_buy_unit
  (format("%.4f",(@btc_sum_ex*(@unit_ave_price-@try_ave_price))/(@try_ave_price-@try_buy_price))).to_f
end

# 依据仓位计算买卖量
def cal_price_by_level(new_level=@try_set_level)
  if @try_set_level and @try_set_level > 0
    new_total_cost = @btc_total_budget_warning*(new_level/100.0)
    opt_price = @btc_price.to_i
    if @ex_cost_twd > new_total_cost
      opt_units = (@ex_cost_twd-new_total_cost)/(opt_price*@usd2twd)*(-1)
    else
      opt_units = (new_total_cost-@ex_cost_twd)/(opt_price*@usd2twd)
    end
    @try_buy_unit = opt_units
    params[:try_buy_unit] = format("%.3f",opt_units)
    @try_buy_price = @btc_price
    params[:try_buy_price] = opt_price
  end
end

########## Function Area Ended ##########

# 主要处理流程
main_process
%>
<h4>
总数：
  <span title="<%=@my_btc%>"><%=@btc_sum%></span> X <%= link_to format("$%.2f",@btc_price), "http://playruby.top:3002/main/kline_chart?symbol=btchusd&period=5min", :target => "_blank" %> = <%=@trezor_jie7206_twd%>/<%=@btc_value_twd%>|¥<%=@btc_value_cny%>|$<%=@btc_value_usd%><br/>
获利：
  <%=@btc_total_profit_twd%>|¥<%=@btc_total_profit_cny%>|$<%=@btc_total_profit_usd%>|<%=format("%.2f", @btc_total_profit_rate)%>%
  <span title="贷款利息：<%=@total_loan_interests_value%>，从<%=@loan_begin_date%>到<%=@next_jinruyi_back_date%>共有<%=@loan_lixi_days%>天，届时贷款余额为<%=@loan_amount%>">可用:<%=format("%.0f",(@total_usdt/10000.0).abs)%>萬</span>|最多:<%=format("%.4f",@max_btc_sum)%> BTC
  <br/>
仓位：
  <%=@ex_cost_twd%>|<%=format("%.2f",@ex_cost_twd_level)%>%|<%=@btc_hold_twd%>/<span class="<%=@btc_total_budget_warn%>"><%=@btc_total_budget_twd%></span>|<%=format("%.2f",@btc_hold_twd_level)%>%
  均价:<span class="<%=@ave_price_warn%>"><%=format("%.2f", @unit_ave_price)%></span>
  <br/>
损益：
  <%=@btc_profit_twd%>|<span class="<%=@cny_profit_warn%>">¥<%=@btc_profit_cny%></span>|$<%=@btc_profit_usd%>|<span class="<%=@btc_profit_warn%>"><%=format("%.1f", @btc_profit_rate)%>%</span><span title="超过<%=@btc_harvest_unit%>BTC即可平仓(包含每月¥<%=@btc_month_goal%>的收益)">
    平仓:<span class="<%=@harvest_unit_warn%>"><%=format("%.2f",@settle_profit)%></span> BTC|$<%=@settle_price%>|<%=@total_asset_value%></span>
  <br/>
</h4>
<hr style="margin: -0.5em"/>
<form method="get" id="try_btc_form">
<% input_width = 38 %>
<h4>
  <%= link_to "价位", :action => :btc_income_new %><input type="text" style="width:<%=input_width%>px" name="try_buy_price" value="<%=params[:try_buy_price]%>" onclick="this.select()"><span class="<%=@buy_unit_hint%>">买卖</span><input type="text" style="width:<%=input_width%>px" name="try_buy_unit" value="<%=params[:try_buy_unit]%>" onclick="this.select()"><span class="<%=@set_price_hint%>">定价</span><input type="text" style="width:<%=input_width%>px" name="try_set_price" value="<%=params[:try_set_price]%>" onclick="this.select()"><span class="<%=@ave_price_hint%>">均价</span><input type="text" style="width:<%=input_width%>px" name="try_ave_price" value="<%=params[:try_ave_price]%>" onclick="this.select()"><span class="<%=@set_level_hint%>">仓位</span><input type="text" style="width:<%=input_width%>px" name="try_set_level" value="<%=params[:try_set_level]%>" onclick="this.select()"><input type="submit" value="试算" style="margin-left:1.5em">
</h4>
</form>
